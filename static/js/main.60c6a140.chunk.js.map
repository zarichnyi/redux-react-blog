{"version":3,"sources":["api/apiNews.js","api/apiComments.js","redux/comments.js","components/Comments/Comments.jsx","components/Article/Article.jsx","components/NewsPage/newsPage.jsx","redux/news.js","api/apiUsers.js","redux/users.js","components/Users/Users.jsx","App.js","redux/store.js","index.js"],"names":["NEWS","a","fetch","response","json","result","COMMENTS","initialState","commentsReducer","state","action","type","comments","Comments","dispatch","useDispatch","articleID","useParams","useSelector","filter","item","postId","useEffect","api","then","commentsFromServer","setCommentsAction","Comment","Group","map","key","id","Content","Author","as","email","Text","body","Article","article","news","find","Card","header","title","description","Description","NewsPage","contextRef","createRef","ref","Grid","columns","Column","List","link","Item","Link","to","Segment","Sticky","context","pushing","path","component","setNewsAction","newsReducer","JSON","parse","localStorage","getItem","userId","USERS","usersReducer","users","Users","text","name","value","unshift","usersFromServer","setUsersAction","Menu","compact","Dropdown","placeholder","selection","options","onChange","event","data","App","newsFromServer","Container","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.60c6a140.chunk.js","sourcesContent":["const NEWS = 'https://jsonplaceholder.typicode.com/posts/';\n\nexport async function getNews() {\n  const response = await fetch(NEWS);\n  const result = await response.json();\n\n  return result;\n}\n","const COMMENTS = 'https://jsonplaceholder.typicode.com/comments/';\n\nexport async function comments() {\n  const response = await fetch(COMMENTS);\n  const result = await response.json();\n\n  return result;\n}","const initialState = [];\n\nconst SET_COMMENTS = 'setComments';\n\nexport const setCommentsAction = (comments) => ({\n  type: SET_COMMENTS,\n  comments,\n})\n\nconst commentsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_COMMENTS:\n      return [...action.comments];\n\n    default:\n      return state;\n  }\n}\n\nexport default commentsReducer;","import { Comment } from 'semantic-ui-react';\nimport React, { useEffect } from 'react';\nimport * as api from '../../api/apiComments';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCommentsAction } from '../../redux/comments';\n\nexport const Comments = () => {\n  const dispatch = useDispatch();\n  const { articleID } = useParams();\n  const comments = useSelector(state => (state.comments).filter(item => item.postId === +articleID));\n\n  useEffect(() => {\n    api.comments()\n      .then(commentsFromServer => (\n        dispatch(setCommentsAction(commentsFromServer))\n      ))\n  }, [dispatch]);\n\n  return (\n    <Comment.Group>\n      {comments.map(comments => (\n        <Comment key={comments.id}>\n          <Comment.Content>\n            <Comment.Author as='a'>{comments.email}</Comment.Author>\n            <Comment.Text>{comments.body}</Comment.Text>\n          </Comment.Content>\n        </Comment>\n      ))}\n    </Comment.Group>\n  )\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { Card } from 'semantic-ui-react';\nimport { Comments } from '../Comments/Comments';\n\nexport const Article = () => {\n  const { articleID } = useParams();\n  const article = useSelector(state => (state.news).find(item => item.id === +articleID));\n  return (\n    <>\n      { article &&\n        <Card>\n          <Card.Content header={article.title} />\n          <Card.Content description={article.body} />\n          <Card.Description>\n            <Comments/>\n          </Card.Description>\n        </Card>}\n    </>\n  )\n\n\n}","import React, { createRef } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { List, Segment, Grid, Sticky } from 'semantic-ui-react';\nimport { Article } from '../Article/Article';\n\nexport const NewsPage = () => {\n  const news = useSelector((state) => state.news);\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Grid columns={2}>\n        <Grid.Column >\n          <List link>\n            {news.map(article => (\n              <List.Item as={Link} to={`/news/${article.id}`} key={article.id}>\n                <Segment>\n                  <Grid columns='equal'>\n                    <Grid.Column>\n                      {article.title}\n                    </Grid.Column>\n                    {/* <Grid.Column>\n                  <Button size=\"small\">Click Here</Button>\n                </Grid.Column> */}\n                  </Grid>\n                </Segment>\n              </List.Item>\n            ))}\n          </List>\n        </Grid.Column>\n        <Grid.Column>\n          <Sticky context={contextRef} pushing>\n            <Route path=\"/news/:articleID\" component={Article} />\n          </Sticky>\n        </Grid.Column>\n      </Grid>\n    </div>\n  )\n};","const initialState = []\n\n const SET_NEWS = 'setNews';\n const FILTER_NEWS = 'filterNews';\n\nexport const filterNewsAction = (id) => ({\n  type: FILTER_NEWS,\n  id,\n})\n\nexport const setNewsAction = (news) => ({\n  type: SET_NEWS,\n  news,\n})\n\nconst newsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_NEWS:\n      return [...action.news];\n\n    case FILTER_NEWS:\n      return (action.id && JSON.parse(localStorage.getItem('news')).filter(item => item.userId === action.id))\n      || JSON.parse(localStorage.getItem('news'))\n\n\n    default:\n      return state;\n  }\n}\n\nexport default newsReducer;","const USERS = 'https://jsonplaceholder.typicode.com/users/';\n\nexport async function getUsers() {\n  const response = await fetch(USERS);\n  const result = await response.json();\n\n  return result;\n}","const initialState = []\n\nconst SET_USERS = 'setUsers';\n\nexport const setUsersAction = (users) => ({\n  type: SET_USERS,\n  users,\n})\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USERS:\n      return [...action.users];\n\n    default:\n      return state;\n  }\n}\n\nexport default usersReducer;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Menu, Dropdown } from 'semantic-ui-react';\nimport * as api from '../../api/apiUsers'\nimport { setUsersAction } from '../../redux/users';\nimport { filterNewsAction } from '../../redux/news';\n\n\nexport const Users = () => {\n  const dispatch = useDispatch();\n  const users = useSelector(state => (state.users).map(item => ({\n    key: item.id,\n    text: item.name,\n    value: item.id,\n  })));\n  users.unshift({ key: 0, text: 'All', value: 0 });\n\n  useEffect(() => {\n    api.getUsers()\n      .then(usersFromServer => (\n        dispatch(setUsersAction(usersFromServer))\n      ))\n  }, [dispatch])\n\n  return (\n    <Menu compact>\n      <Dropdown\n        placeholder=\"All\"\n        selection options={users}\n        onChange={(event, data) => dispatch(filterNewsAction(data.value))}\n      />\n    </Menu>\n  )\n}","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as api from './api/apiNews';\nimport { NewsPage } from './components/NewsPage/newsPage';\nimport { Container, Segment } from 'semantic-ui-react';\nimport { setNewsAction } from './redux/news';\nimport { Users } from './components/Users/Users';\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    api.getNews()\n      .then(newsFromServer => {\n        if(JSON.parse(localStorage.getItem('news'))) {\n          dispatch(setNewsAction(JSON.parse(localStorage.getItem('news'))));\n        } else {\n          dispatch(setNewsAction(newsFromServer));\n        }\n      })\n  }, [dispatch])\n\n  return (\n    <Container>\n      <Segment>\n        <Users />\n      </Segment>\n      <Segment>\n        <NewsPage />\n      </Segment>\n    </Container>\n  );\n}\n\nexport default App;\n","import { combineReducers, createStore } from 'redux';\nimport commentsReducer from './comments';\nimport newsReducer from './news';\nimport usersReducer from './users';\n\nconst reducer = combineReducers({\n  news: newsReducer,\n  comments: commentsReducer,\n  users: usersReducer,\n})\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport store from './redux/store';\n\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter> ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}