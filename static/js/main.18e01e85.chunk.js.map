{"version":3,"sources":["api/apiNews.js","api/apiComments.js","redux/comments.js","components/Comments/Comments.jsx","components/Article/Article.jsx","components/NewsPage/newsPage.jsx","redux/news.js","App.js","redux/store.js","index.js"],"names":["NEWS","a","fetch","response","json","result","COMMENTS","initialState","commentsReducer","state","action","type","comments","Comments","dispatch","useDispatch","articleID","useParams","useSelector","filter","item","postId","useEffect","api","then","commentsFromServer","setCommentsAction","Comment","Group","map","key","id","Content","Author","as","Text","body","Article","article","news","find","Card","header","title","description","Description","NewsPage","contextRef","createRef","Grid","Row","ref","Column","width","List","link","Item","Link","to","Segment","columns","Sticky","context","pushing","path","component","newsReducer","App","newsFromServer","Container","divided","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18e01e85.chunk.js","sourcesContent":["const NEWS = 'https://jsonplaceholder.typicode.com/posts/';\n\nexport async function getAllNews() {\n  const response = await fetch(NEWS);\n  const result = await response.json();\n\n  return result;\n}\n","const COMMENTS = 'https://jsonplaceholder.typicode.com/comments/';\n\nexport async function comments() {\n  const response = await fetch(COMMENTS);\n  const result = await response.json();\n\n  return result;\n}","const initialState = [];\n\nconst SET_COMMENTS = 'setComments';\n\nexport const setCommentsAction = (comments) => ({\n  type: SET_COMMENTS,\n  comments,\n})\n\nconst commentsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_COMMENTS:\n      return [...action.comments];\n\n    default:\n      return state;\n  }\n}\n\nexport default commentsReducer;","import { Comment } from 'semantic-ui-react';\nimport React, { useEffect } from 'react';\nimport * as api from '../../api/apiComments';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCommentsAction } from '../../redux/comments';\n\nexport const Comments = () => {\n  const dispatch = useDispatch();\n  const { articleID } = useParams();\n  const comments = useSelector(state => (state.comments).filter(item => item.postId === +articleID));\n\n  useEffect(() => {\n    api.comments()\n      .then(commentsFromServer => (\n        dispatch(setCommentsAction(commentsFromServer))\n      ))\n  }, [dispatch])\n\n  return (\n    <Comment.Group>\n      {comments.map(comments => (\n        <Comment key={comments.id}>\n          <Comment.Content>\n            <Comment.Author as='a'>{comments.postId}</Comment.Author>\n            <Comment.Text>{comments.body}</Comment.Text>\n          </Comment.Content>\n        </Comment>\n      ))}\n\n    </Comment.Group>\n  )\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { Card } from 'semantic-ui-react';\nimport { Comments } from '../Comments/Comments';\n\nexport const Article = () => {\n  const { articleID } = useParams();\n  const article = useSelector(state => (state.news).find(item => item.id === +articleID));\n  return (\n    <>\n      { article &&\n        <Card>\n          <Card.Content header={article.title} />\n          <Card.Content description={article.body} />\n          <Card.Description>\n            <Comments/>\n          </Card.Description>\n        </Card>}\n    </>\n  )\n\n\n}","import React, { createRef } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { List, Segment, Grid, Sticky } from 'semantic-ui-react';\nimport { Article } from '../Article/Article';\n\nexport const NewsPage = () => {\n  const news = useSelector((state) => state.news);\n  const contextRef = createRef();\n\n  return (\n    <Grid.Row>\n      <div ref={contextRef}>\n      <Grid.Column width={10}>\n        <List link>\n          {news.map(article => (\n            <List.Item as={Link} to={`/news/${article.id}`} key={article.id}>\n              <Segment>\n                <Grid columns='equal'>\n                  <Grid.Column width={12}>\n                    {article.title}\n                  </Grid.Column>\n                  {/* <Grid.Column>\n                  <Button size=\"small\">Click Here</Button>\n                </Grid.Column> */}\n                </Grid>\n              </Segment>\n            </List.Item>\n          ))}\n        </List>\n      </Grid.Column>\n      </div>\n        <Grid.Column width={6}>\n          <Sticky context={contextRef} pushing>\n            <Route path=\"/news/:articleID\" component={Article} />\n          </Sticky>\n        </Grid.Column>\n    </Grid.Row>\n  )\n};","const initialState = []\n\nexport const SET_NEWS = 'setNews';\n\nexport const setNewsAction = (news) => ({\n  type: SET_NEWS,\n  news,\n})\n\nconst newsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_NEWS:\n      return [...action.news];\n\n    default:\n      return state;\n  }\n}\n\nexport default newsReducer;","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as api from './api/apiNews';\nimport { NewsPage } from './components/NewsPage/newsPage';\nimport { Container, Grid } from 'semantic-ui-react';\nimport { setNewsAction } from './redux/news';\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    api.getAllNews()\n    .then(newsFromServer => (\n      dispatch(setNewsAction(newsFromServer))\n    ))\n  }, [dispatch])\n\n  return (\n    <Container>\n        <Grid divided='vertically'>\n          <NewsPage />\n        </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","import { combineReducers, createStore } from 'redux';\nimport commentsReducer from './comments';\nimport newsReducer from './news';\n\nconst reducer = combineReducers({\n  news: newsReducer,\n  comments: commentsReducer,\n})\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport store from './redux/store';\n\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter> ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}